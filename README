William John Holden (wjholden@gmail.com) 2018-08-19

This development environment is based on Apache, PHP, and Git.

Prerequisites:	 You must have docker installed and internet access.

		 This was developed and tested on a Raspberry Pi.
		 Something tells me I encountered more issues on ARM
		 than you should on x86.
		 
		 Don't run this if you already have containers named
		 "git" or "www" (or anything prepended "wjholden-") that
		 you would miss.

		 I interpretted the word "should" in the RFC 2119 sense
		 regarding use of port 22. This program maps the Git SSH
		 port to 8022. You may edit the build script to actually
		 use port 22 if you want.

Usage:		 Type "./build.sh" to create and start the environment.
		 Type "./test.sh" to submit a few test files to the repo.
		 Use the following commands to send your own test files:

		 git clone ssh://admin@localhost:8022/home/admin/admin
		 cd admin
		 echo "your commands" > "your file"
		 git add "your file"
		 git commit -m "your commit message"
		 git push
		 curl -k https://localhost:443

build.sh	 Similar to a Makefile, this shell script executes
		 the "docker build" and "docker run" commands needed
		 to get the environment entirely set up.

		 The build script accepts SSH and HTTPS port assignments
		 as command-line arguments.

www/Dockerfile	 Builds the "www" container used as a web server.
		 The web server is an Alpine Linux host with Apache
		 and PHP. The /var/www/html/git/ directory should be
		 mounted to the same location as the Git server's
		 root.

www/id_rsa	 A private key used to authenticate to the Git server.

www/index.php	 A trivial script to execute any scripts in git/admin/
		 and print the output.

git/Dockerfile	 Builds the "git" container used as a git repository.
		 The git repository is also an Alpine Linux host. The
		 repositories must be mounted at the same point as
		 /var/www/html/git/ in the web server.

git/id_rsa.pub	 A public key used to authenticate the PHP application.

test.sh		 A script to commit a few test files and demonstrate
		 that the webserver is executing their contents.

test.tar.gz	 Test files that are automatically committed using the
		 "test.sh" script.

How's that for a network guy who doesn't develop for the web? I'm pretty
proud of all this. I welcome any feedback from this exercise!
